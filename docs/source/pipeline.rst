.. _pipeline:

**Pipelines**
=============

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************
Spin up environment
*******************

**Build-agent**

   * Specifies the version of the CircleCI build agent used to run the build.

**System information**

   * Provides information about the operating system and construction environment. In our case, the operating system is Ubuntu 20.04.6 LTS, with a Linux kernel 5.15.0-1053-aws.

**Starting container**

   * Indicates the start of a Docker container based on the cimg/python:3.12.0 image, necessary to execute the construction steps.

**Warning: No authentication provided**

   * This warning indicates that no authentication has been provided to pull the image from Docker Hub. CircleCI uses its own credentials for this.

**Image cache not found on this host, downloading cimg/python:3.12.0**

   * Indicates that the Docker cimg/python:3.12.0 image is not present in the local cache of the build host and must therefore be downloaded from the Docker Hub.

**cimg/python:3.12.0**

   * Detailed information about the downloaded Docker image, including its SHA256 hash.

**Pull stats**

   * Statistics on downloading and extracting the Docker image, indicating the time required and the download speed.

**Time to create container**

   * Time required to create the Docker container from the uploaded image.

**Time to upload agent and config**

   * Time required to download the build agent and configuration file.

**Time to start containers**

   * The time it takes to start Docker containers to complete the construction steps.

This release provides an overview of the CircleCI build environment startup process and the download of dependencies needed to run the build steps.

.. figure:: _static/circleci_spin_up_environnement.png
   :scale: 50
   :align: center
   :alt: circleci spin up environnement

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_spin_up_environnement.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************************
Preparing environment variables
*******************************

ðŸ’¡ Construction environment variables: BASH_ENV, CIRCLECI, CI, etc...:

   * These variables are defined by the CircleCI build environment to provide information about the current process. 

   * Example

      * **CIRCLE_BRANCH** contains the name of the current branch (master in this case), 
      * **CIRCLE_BUILD_NUM** contains the build number
      * **CIRCLE_BUILD_URL** provides the URL of the build details page on the CircleCI dashboard.

ðŸ’¡ Project environment variables: CIRCLE_USERNAME, CIRCLE_PROJECT_REPONAME, CIRCLE_REPOSITORY_URL, etc...:

   * These variables are derived from the CircleCI project parameters and provide specific information about the project under construction.

   * Example

      * **CIRCLE_USERNAME** contains the project owner username, 
      * **CIRCLE_PROJECT_REPONAME** contains the repository name
      * **CIRCLE_REPOSITORY_URL** contains the Git repository URL.

ðŸ’¡ Workflow environment variables: CIRCLE_WORKFLOW_ID, CIRCLE_WORKFLOW_JOB_ID, etc...:

   * These variables are associated with the running workflow. They provide information about the workflow ID, the job ID in the workflow, and the workflow workspace ID.


ðŸ’¡ Other variables: CIRCLE_OIDC_TOKEN, CIRCLE_OIDC_TOKEN_V2, CIRCLE_PLUGIN_TEST:

   * These variables are project-specific and can be used to store sensitive information or API keys. In this case, they are redacted (**REDACTED**) for security reasons. This pipeline appears to be a build and test (**build_and_test**) phase of your Orange County Lettings project. It is triggered on the master branch and uses various environment variables to retrieve information about the context of the build.

.. figure:: _static/circleci_preparing_enrironnment_variables.png
   :scale: 50
   :align: center
   :alt: circleci preparing enrironnment variables

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_preparing_enrironnment_variables.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Checkout code**

   * This part of the build output is related to the configuration and use of SSH keys to access Git repositories.

**Creating .ssh directory**

   * Creates the . ssh directory in the user directory to store the SSH keys.

**Adding the following entries to known_hosts**

   * Added Git host public key (**GitHub, Bitbucket, GitLab**) to known_hosts file. This allows the trusted host (CircleCI) to identify the Git host and ensure that it connects to the correct server.

**Writing SSH key for checkout**

   * Generates a private SSH key (``id_rsa``) and a public key (``id_rsa.pub``) for authentication when retrieving source code from the Git repository.

**Cloning git repository**

   * Clone the Git repository to the current working directory.

**Checking out branch** 

   * Checks the specified branch. In this case, it is mentioned that the branch is up to date with origin/master and that the HEAD is now on the latest revision of this branch.

These steps ensure that CircleCI can access the Git repository using SSH keys and retrieve the source code for construction.

.. figure:: _static/circleci_checkout_code.png
   :scale: 50
   :align: center
   :alt: circleci checkout code

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_checkout_code.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ’¡ Link lockfile

This part indicates that a Pipfile.lock file is copied from the ``/home/circleci/project/`` directory to a temporary /tmp/cci_pycache/lockfile directory.

The ``Pipfile.lock`` file is generated by **Pipenv** and contains information about specific Python dependencies with their exact versions. It is used to ensure that the same versions of dependencies in different environments.

Copying this file to a temporary directory is a preparatory step for installing dependencies or other operations that require this file.

.. figure:: _static/circleci_link_lockfile.png
   :scale: 50
   :align: center
   :alt: circleci link lockfile

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_link_lockfile.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ’¡ Save Python version

This script extracts the version of Python installed on the runtime and stores it in a file named **python-version** in the temporary directory ``/tmp/``.

Here is what each part of the script does:

**#!/bin/bash -eo pipefail**

   * This line indicates that the script should be interpreted by **Bash** (``#!/bin/bash``) with the **-eo pipefail. -e** means "exit on error", and **-o pipefail** means that the script will fail if one of the commands in a command chain (``pipeline``) fails.

**python --version**

   * This command runs python --version to get the version of **Python** installed. The ``--version`` option asks Python to display its **version**, and the output is directed to the standard output.

**cut -d ' ' -f2**

   * This command uses cut to extract the second column (bounded by a space) from the python ``--version`` output, which corresponds to the **Python version**.

**/tmp/python-version**

   * This part redirects the output of the previous command to the ``/tmp/python-version`` file, where the Python version is stored.

In summary, this Bash script retrieves the version of Python and stores it in a file for later reference or for use in other construction steps.

.. figure:: _static/circleci_save_python_version.png
   :scale: 50
   :align: center
   :alt: circleci save python version

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_save_python_version.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ’¡ Restoring cache

Cette partie de la sortie indique que CircleCI a trouvÃ© un cache de la construction prÃ©cÃ©dente (build 75) pour les chemins spÃ©cifiÃ©s, et il essaie de le tÃ©lÃ©charger pour l'utiliser dans cette construction actuelle.

Voici ce que chaque partie signifie :

Found a cache from build 75 : Indique que CircleCI a trouvÃ© un cache Ã  partir de la construction prÃ©cÃ©dente avec le numÃ©ro de build 75.

Size: 94 MiB : Indique la taille du cache trouvÃ©.

Cached paths : Liste les chemins des fichiers ou rÃ©pertoires qui sont inclus dans le cache. Dans ce cas, seul /tmp/cci_pycache est inclus.

Downloading cache archive : Indique que CircleCI tÃ©lÃ©charge l'archive du cache.

Validating cache : Valide l'archive du cache aprÃ¨s son tÃ©lÃ©chargement.

Download duration for cache file : Indique la durÃ©e nÃ©cessaire pour tÃ©lÃ©charger l'archive du cache.

Unarchiving cache : DÃ©compresse l'archive du cache.

Extraction duration : Indique la durÃ©e nÃ©cessaire pour extraire l'archive du cache.

L'utilisation de cache dans CircleCI permet de stocker des artefacts ou des fichiers temporaires entre les builds afin d'accÃ©lÃ©rer les builds suivantes en Ã©vitant de refaire certaines Ã©tapes. Dans ce cas, le cache semble contenir des fichiers temporaires ou des artefacts liÃ©s Ã  l'installation des dÃ©pendances Python.

.. figure:: _static/circleci_restoring_cache.png
   :scale: 50
   :align: center
   :alt: circleci restoring cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_restoring_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Move restored cache

Ces lignes de la sortie indiquent que CircleCI restaure des Ã©lÃ©ments du cache prÃ©cÃ©dent vers leurs emplacements d'origine dans l'environnement de construction actuel. Voici ce que chaque ligne signifie :

Restoring /tmp/cci_pycache/venv/L2hvbWUvY2lyY2xlY2kvLmxvY2FsL3NoYXJlL3ZpcnR1YWxlbnZz to /home/circleci/.local/share/virtualenvs : Cela signifie que CircleCI restaure un environnement virtuel prÃ©cÃ©demment sauvegardÃ© (probablement crÃ©Ã© avec Virtualenv) depuis le cache vers le rÃ©pertoire /home/circleci/.local/share/virtualenvs.

Restoring /tmp/cci_pycache/pypi/L2hvbWUvY2lyY2xlY2kvLmNhY2hlL3BpcA== to /home/circleci/.cache/pip : Cette ligne indique que CircleCI restaure des packages Python prÃ©cÃ©demment tÃ©lÃ©chargÃ©s depuis le cache vers le rÃ©pertoire de cache Pip (/home/circleci/.cache/pip). L'identifiant cryptÃ© (comme L2hvbWUvY2lyY2xlY2kvLmNhY2hlL3BpcA==) fait rÃ©fÃ©rence Ã  un chemin spÃ©cifique dans le cache.

Restoring /tmp/cci_pycache/pypi/L2hvbWUvY2lyY2xlY2kvLmNhY2hlL3BpcGVudg== to /home/circleci/.cache/pipenv : Cela indique que des packages Python prÃ©cÃ©demment tÃ©lÃ©chargÃ©s spÃ©cifiquement pour Pipenv sont restaurÃ©s depuis le cache vers le rÃ©pertoire de cache Pipenv (/home/circleci/.cache/pipenv).

Ces Ã©tapes de restauration du cache contribuent Ã  accÃ©lÃ©rer le processus de construction en Ã©vitant de tÃ©lÃ©charger Ã  nouveau des dÃ©pendances dÃ©jÃ  prÃ©sentes dans le cache. Cela est particuliÃ¨rement utile dans les constructions suivantes oÃ¹ les mÃªmes dÃ©pendances sont utilisÃ©es.

.. figure:: _static/circleci_move_restored_cache.png
   :scale: 50
   :align: center
   :alt: circleci move restored cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_move_restored_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Install dependencies with pipenv using project Pipfile or inline packages

Ces lignes de sortie indiquent diffÃ©rentes Ã©tapes dans le processus de construction de votre projet. Voici ce que chacune d'entre elles signifie :

Loading .env environment variables... : Cette Ã©tape charge les variables d'environnement Ã  partir du fichier .env. Ce fichier est souvent utilisÃ© pour stocker des variables sensibles ou spÃ©cifiques Ã  l'environnement, telles que les clÃ©s d'API ou les informations de configuration.

Installing dependencies from Pipfile.lock (bbdd7e)... : Cette Ã©tape installe les dÃ©pendances Python spÃ©cifiÃ©es dans le fichier Pipfile.lock. Le contenu entre parenthÃ¨ses, dans ce cas (bbdd7e), fait rÃ©fÃ©rence Ã  la version spÃ©cifique du fichier Pipfile.lock utilisÃ©e pour installer les dÃ©pendances. Cela garantit que les mÃªmes versions exactes des dÃ©pendances sont installÃ©es Ã  chaque fois.

To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. : Ces instructions indiquent comment activer l'environnement virtuel du projet crÃ©Ã© par Pipenv. L'utilisation d'un environnement virtuel permet d'isoler les dÃ©pendances du projet des autres projets et du systÃ¨me hÃ´te. Vous pouvez activer l'environnement virtuel en exÃ©cutant pipenv shell ou exÃ©cuter des commandes Ã  l'intÃ©rieur de l'environnement virtuel avec pipenv run.

AprÃ¨s ces Ã©tapes, votre projet est prÃªt Ã  Ãªtre exÃ©cutÃ© ou Ã  Ãªtre soumis Ã  d'autres processus de construction ou de dÃ©ploiement.

.. figure:: _static/circleci_install_dependencies_with_pipenv.png
   :scale: 50
   :align: center
   :alt: circleci install dependencies with pipenv using project Pipfile or inline packages

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_install_dependencies_with_pipenv.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Copy to cache directory

Ces lignes de sortie indiquent que CircleCI a dÃ©tectÃ© que le rÃ©pertoire de cache existe dÃ©jÃ  et qu'il a donc Ã©tÃ© sautÃ©. Ensuite, il copie le fichier Pipfile.lock de votre projet vers le rÃ©pertoire de cache.

Voici ce que chaque ligne signifie :

Cache directory already exists. Skipping... : Cela signifie que le rÃ©pertoire de cache a dÃ©jÃ  Ã©tÃ© crÃ©Ã© lors d'une construction prÃ©cÃ©dente et qu'il n'est donc pas nÃ©cessaire de le crÃ©er Ã  nouveau. Le processus de construction passe Ã  l'Ã©tape suivante.

Copying /home/circleci/project/Pipfile.lock to /tmp/cci_pycache/lockfile : Cette ligne indique que le fichier Pipfile.lock de votre projet est copiÃ© vers le rÃ©pertoire de cache (/tmp/cci_pycache/lockfile). Le fichier Pipfile.lock contient des informations sur les dÃ©pendances Python spÃ©cifiques avec leurs versions exactes et est utilisÃ© pour garantir la reproductibilitÃ© de l'environnement d'exÃ©cution.

Ces Ã©tapes contribuent Ã  optimiser le processus de construction en Ã©vitant de recrÃ©er des Ã©lÃ©ments dÃ©jÃ  prÃ©sents dans le cache lorsque cela est possible.

.. figure:: _static/circleci_copy_to_cache_directory.png
   :scale: 50
   :align: center
   :alt: circleci copy to cache directory

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_copy_to_cache_directory.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Saving cache

Ces lignes de sortie indiquent que la gÃ©nÃ©ration du cache a Ã©tÃ© ignorÃ©e car un cache existe dÃ©jÃ  pour la clÃ© spÃ©cifiÃ©e. La clÃ© du cache est un identifiant unique qui dÃ©pend gÃ©nÃ©ralement des fichiers ou des rÃ©pertoires inclus dans le cache, ainsi que de leurs Ã©tats respectifs.

Voici ce que chaque ligne signifie :

Skipping cache generation, cache already exists for key: ... : Cela signifie que CircleCI a vÃ©rifiÃ© l'existence d'un cache pour la clÃ© spÃ©cifiÃ©e, et a constatÃ© qu'un cache existe dÃ©jÃ . Par consÃ©quent, la gÃ©nÃ©ration du cache est ignorÃ©e car elle n'est pas nÃ©cessaire.

Found one created at ... : Cette ligne indique que CircleCI a trouvÃ© un cache qui a Ã©tÃ© crÃ©Ã© Ã  une certaine date et heure prÃ©cises. Cela permet Ã  l'utilisateur de connaÃ®tre l'Ã¢ge du cache actuellement utilisÃ©.

La prÃ©sence de caches peut accÃ©lÃ©rer le processus de construction en Ã©vitant de refaire certaines Ã©tapes qui ont dÃ©jÃ  Ã©tÃ© exÃ©cutÃ©es et en rÃ©utilisant les rÃ©sultats des constructions prÃ©cÃ©dentes. 

.. figure:: _static/circleci_saving_cache.png
   :scale: 50
   :align: center
   :alt: circleci saving cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_saving_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Run test

Ces lignes de sortie reprÃ©sentent le rapport de test gÃ©nÃ©rÃ© par Pytest pour votre projet. Voici ce que chaque partie signifie :

Loading .env environment variables... : Cette Ã©tape charge les variables d'environnement Ã  partir du fichier .env, qui est souvent utilisÃ© pour stocker des variables sensibles ou spÃ©cifiques Ã  l'environnement, telles que les clÃ©s d'API ou les informations de configuration.

============================= test session starts ============================== : Cela indique le dÃ©but de la session de test.

platform linux -- Python 3.12.0, pytest-8.0.2, pluggy-1.4.0 : Cette ligne fournit des informations sur la plateforme (Linux), la version de Python (3.12.0), la version de Pytest (8.0.2) et la version de Pluggy (1.4.0).

django: version: 5.0.2, settings: oc_lettings_site.settings (from ini) : Cette ligne indique la version de Django utilisÃ©e (5.0.2) et les paramÃ¨tres de configuration spÃ©cifiÃ©s dans le fichier pytest.ini.

rootdir: /home/circleci/project : Cela indique le rÃ©pertoire racine du projet oÃ¹ les tests ont Ã©tÃ© exÃ©cutÃ©s.

configfile: pytest.ini : Cela indique le fichier de configuration utilisÃ© pour les tests (dans ce cas, pytest.ini).

plugins: cov-4.1.0, django-4.8.0 : Cette ligne indique les plugins Pytest utilisÃ©s, tels que le plugin de couverture (cov) et le plugin Django (django).

collected 13 items : Cela indique le nombre total de tests collectÃ©s (13 dans ce cas).

lettings/test_lettings/test_lettings.py ...... [ 46%] : Cela montre les rÃ©sultats des tests pour les fichiers de test situÃ©s dans le rÃ©pertoire lettings/test_lettings. Dans cet exemple, 46% des tests dans ce rÃ©pertoire ont rÃ©ussi.

oc_lettings_site/test_oc_lettings_site/test_oc_lettings_site.py .. [ 61%] : Cela montre les rÃ©sultats des tests pour les fichiers de test situÃ©s dans le rÃ©pertoire oc_lettings_site/test_oc_lettings_site. Dans cet exemple, 61% des tests dans ce rÃ©pertoire ont rÃ©ussi.

profiles/test_profiles/test_profiles.py ..... [100%] : Cela montre les rÃ©sultats des tests pour les fichiers de test situÃ©s dans le rÃ©pertoire profiles/test_profiles. Dans cet exemple, 100% des tests dans ce rÃ©pertoire ont rÃ©ussi.

Coverage HTML written to dir htmlcov : Cela indique que le rapport de couverture a Ã©tÃ© gÃ©nÃ©rÃ© au format HTML et enregistrÃ© dans le rÃ©pertoire htmlcov.

============================== 13 passed in 5.13s ============================== : Cela indique que tous les tests ont rÃ©ussi (13 au total) et qu'ils ont Ã©tÃ© exÃ©cutÃ©s en 5.13 secondes.

En rÃ©sumÃ©, ces lignes fournissent un aperÃ§u des tests exÃ©cutÃ©s, de leur succÃ¨s ou de leur Ã©chec, ainsi que des statistiques sur la session de test dans son ensemble

.. figure:: _static/circleci_run_tests.png
   :scale: 50
   :align: center
   :alt: circleci run tests

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_run_tests.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ“œ Persisting to workspace

La sortie indique que CircleCI est en train de crÃ©er une archive de l'espace de travail, qui comprend gÃ©nÃ©ralement les fichiers et rÃ©pertoires nÃ©cessaires Ã  l'exÃ©cution du pipeline. Une fois l'archive crÃ©Ã©e, elle est tÃ©lÃ©chargÃ©e vers l'emplacement spÃ©cifiÃ©.

Dans votre cas, l'archive de l'espace de travail a Ã©tÃ© tÃ©lÃ©chargÃ©e avec succÃ¨s aprÃ¨s avoir Ã©tÃ© crÃ©Ã©e. La taille totale tÃ©lÃ©chargÃ©e est de 36 MiB, ce qui signifie que l'ensemble des fichiers de l'espace de travail Ã  tÃ©lÃ©charger est de cette taille.

Cette Ã©tape est gÃ©nÃ©ralement effectuÃ©e pour sauvegarder l'Ã©tat de l'espace de travail Ã  un certain point du pipeline, ce qui peut Ãªtre utile pour le dÃ©bogage ou pour analyser l'Ã©tat du projet Ã  ce moment prÃ©cis.

.. figure:: _static/circleci_persisting_to_workspace.png
   :scale: 50
   :align: center
   :alt: circleci persisting to workspace

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_persisting_to_workspace.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

.. raw:: html

   <a href="https://app.circleci.com/pipelines/github/LaurentJouron/Orange_County_Lettings" class="button">
       <img src="_static/button_all_pipelines.png" alt="Report button" width="200" height="100" />
   </a>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------