.. _pipeline:

**Pipelines**
=============

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************
Spin up environment
*******************

This release provides an overview of the CircleCI build environment startup process and the download of dependencies needed to run the build steps.

.. figure:: _static/circleci_spin_up_environnement.png
   :scale: 50
   :align: center
   :alt: circleci spin up environnement

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_spin_up_environnement.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************************
Preparing environment variables
*******************************

ðŸ’¡ Construction environment variables: BASH_ENV, CIRCLECI, CI, etc...:

   * These variables are defined by the CircleCI build environment to provide information about the current process. 

   * Example

      * **CIRCLE_BRANCH** contains the name of the current branch (master in this case), 
      * **CIRCLE_BUILD_NUM** contains the build number
      * **CIRCLE_BUILD_URL** provides the URL of the build details page on the CircleCI dashboard.

ðŸ’¡ Project environment variables: CIRCLE_USERNAME, CIRCLE_PROJECT_REPONAME, CIRCLE_REPOSITORY_URL, etc...:

   * These variables are derived from the CircleCI project parameters and provide specific information about the project under construction.

   * Example

      * **CIRCLE_USERNAME** contains the project owner username, 
      * **CIRCLE_PROJECT_REPONAME** contains the repository name
      * **CIRCLE_REPOSITORY_URL** contains the Git repository URL.

ðŸ’¡ Workflow environment variables: CIRCLE_WORKFLOW_ID, CIRCLE_WORKFLOW_JOB_ID, etc...:

   * These variables are associated with the running workflow. They provide information about the workflow ID, the job ID in the workflow, and the workflow workspace ID.


ðŸ’¡ Other variables: CIRCLE_OIDC_TOKEN, CIRCLE_OIDC_TOKEN_V2, CIRCLE_PLUGIN_TEST:

   * These variables are project-specific and can be used to store sensitive information or API keys. In this case, they are redacted (**REDACTED**) for security reasons. This pipeline appears to be a build and test (**build_and_test**) phase of your Orange County Lettings project. It is triggered on the master branch and uses various environment variables to retrieve information about the context of the build.

.. figure:: _static/circleci_preparing_enrironnment_variables.png
   :scale: 50
   :align: center
   :alt: circleci preparing enrironnment variables

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_preparing_enrironnment_variables.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*************
Checkout code
*************

These steps ensure that CircleCI can access the Git repository using SSH keys and retrieve the source code for construction.

.. figure:: _static/circleci_checkout_code.png
   :scale: 50
   :align: center
   :alt: circleci checkout code

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_checkout_code.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*************
Link lockfile
*************

This part indicates that a Pipfile.lock file is copied from the ``/home/circleci/project/`` directory to a temporary /tmp/cci_pycache/lockfile directory.

The ``Pipfile.lock`` file is generated by **Pipenv** and contains information about specific Python dependencies with their exact versions. It is used to ensure that the same versions of dependencies in different environments.

Copying this file to a temporary directory is a preparatory step for installing dependencies or other operations that require this file.

.. figure:: _static/circleci_link_lockfile.png
   :scale: 50
   :align: center
   :alt: circleci link lockfile

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_link_lockfile.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************
Save Python version
*******************

This script extracts the version of Python installed on the runtime and stores it in a file named **python-version** in the temporary directory ``/tmp/``.

In summary, this Bash script retrieves the version of Python and stores it in a file for later reference or for use in other construction steps.

.. figure:: _static/circleci_save_python_version.png
   :scale: 50
   :align: center
   :alt: circleci save python version

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_save_python_version.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

***************
Restoring cache
***************

This part indicates that CircleCI has found a previous build cache (build 75) for the specified paths, and it tries to download it for use in this current build.

Using cache in CircleCI allows you to store temporary files between builds in order to speed up subsequent builds without having to repeat certain steps. In this case, the cache appears to contain temporary files related to the installation of Python dependencies.

.. figure:: _static/circleci_restoring_cache.png
   :scale: 50
   :align: center
   :alt: circleci restoring cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_restoring_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*******************
Move restored cache
*******************

These lines indicate that CircleCI restores items from the previous cache to their original locations in the current environment.

These cache restore steps help speed up the build process by avoiding re-downloading dependencies already present in the cache. This is especially useful in subsequent builds where the same dependencies are used.

.. figure:: _static/circleci_move_restored_cache.png
   :scale: 50
   :align: center
   :alt: circleci move restored cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_move_restored_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*************************************************************************
Install dependencies with pipenv using project Pipfile or inline packages
*************************************************************************

These output lines indicate different stages in the construction process of your project.

After these steps, the project is ready for execution or further construction or deployment processes.

.. figure:: _static/circleci_install_dependencies_with_pipenv.png
   :scale: 50
   :align: center
   :alt: circleci install dependencies with pipenv using project Pipfile or inline packages

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_install_dependencies_with_pipenv.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

***********************
Copy to cache directory
***********************

These output lines indicate that CircleCI has detected that the cache directory already exists and has been skipped. Then it copies the Pipfile.lock file from your project to the cache directory.

These steps help optimize the construction process by avoiding recreating elements already present in the cache when possible.

.. figure:: _static/circleci_copy_to_cache_directory.png
   :scale: 50
   :align: center
   :alt: circleci copy to cache directory

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_copy_to_cache_directory.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

************
Saving cache
************

These output lines indicate that cache generation has been ignored because a cache already exists for the specified key. The cache key is a unique identifier that typically depends on the files or directories included in the cache, as well as their respective states.

The presence of caches can speed up the construction process by avoiding repeating certain steps that have already been performed and reusing the results of previous constructions. 

.. figure:: _static/circleci_saving_cache.png
   :scale: 50
   :align: center
   :alt: circleci saving cache

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_saving_cache.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

********
Run test
********

These output lines represent the test report generated by Pytest of the project.

In summary, these lines provide an overview of the tests performed, their success or failure, as well as statistics on the test session as a whole.

.. figure:: _static/circleci_run_tests.png
   :scale: 50
   :align: center
   :alt: circleci run tests

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_run_tests.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

***********************
Persisting to workspace
***********************

The output indicates that CircleCI is creating a workspace archive, which typically includes the files and directories needed to run the pipeline. Once the archive is created, it is downloaded to the specified location.

In this case, the workspace archive was successfully downloaded after it was created. The total size downloaded is 36 MiB, which means that all the files in the workspace to download are of this size.

This step is usually done to save the workspace state at a certain point in the pipeline, which can be useful for debugging or analyzing the project state at that point in time.

.. figure:: _static/circleci_persisting_to_workspace.png
   :scale: 50
   :align: center
   :alt: circleci persisting to workspace

.. raw:: html

   <div style="text-align: center;">
       <a href="_static/circleci_persisting_to_workspace.png" download class="button">
          <img src="_static/button_download.png" alt="Donwload button" width="100" height="50" />
       </a>
   </div>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

.. raw:: html

   <a href="https://app.circleci.com/pipelines/github/LaurentJouron/Orange_County_Lettings" class="button">
       <img src="_static/button_all_pipelines.png" alt="Report button" width="200" height="100" />
   </a>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------